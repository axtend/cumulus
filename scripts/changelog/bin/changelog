#!/usr/bin/env ruby

# frozen_string_literal: true

# call for instance as:
# ./bin/changelog statemine-v5.0.0
#
# You may set the ENV NO_CACHE to force fetching from Github
# You should also ensure you set the ENV: GITHUB_TOKEN

require_relative '../lib/changelog'
require 'logger'

logger = Logger.new($stdout)
logger.level = Logger::DEBUG
logger.debug('Starting')

owner = 'paritytech'
repo = 'cumulus'
ref1 = ARGV[0]
ref2 = ARGV[1] || 'HEAD'
output = ARGV[2] || 'release-notes.md'

ENV['REF1'] = ref1
ENV['REF2'] = ref2

gh_cumulus = SubRef.new(format('%<owner>s/%<repo>s', { owner: owner, repo: repo }))

axia_ref1 = gh_cumulus.get_dependency_reference(ref1, 'axia-client')
axia_ref2 = gh_cumulus.get_dependency_reference(ref2, 'axia-client')

substrate_ref1 = gh_cumulus.get_dependency_reference(ref1, 'sp-io')
substrate_ref2 = gh_cumulus.get_dependency_reference(ref2, 'sp-io')

logger.debug("Axia from:   #{axia_ref1}")
logger.debug("Axia to:     #{axia_ref2}")

logger.debug("Substrate from:  #{substrate_ref1}")
logger.debug("Substrate to:    #{substrate_ref2}")

cumulus_data = 'cumulus.json'
substrate_data = 'substrate.json'
axia_data = 'axia.json'

logger.debug("Using CUMULUS:   #{cumulus_data}")
logger.debug("Using SUBSTRATE: #{substrate_data}")
logger.debug("Using AXIA:  #{axia_data}")

logger.warn('NO_CACHE set') if ENV['NO_CACHE']

# This is acting as cache so we don't spend time querying while testing
if ENV['NO_CACHE'] || !File.file?(cumulus_data)
  logger.debug(format('Fetching data for Cumulus into %s', cumulus_data))
  cmd = format('changelogerator %<owner>s/%<repo>s -f %<from>s -t %<to>s > %<output>s',
               { owner: owner, repo: repo, from: ref1, to: ref2, output: cumulus_data })
  system(cmd)
else
  logger.debug("Re-using:#{cumulus_data}")
end

if ENV['NO_CACHE'] || !File.file?(axia_data)
  logger.debug(format('Fetching data for Axia into %s', axia_data))
  cmd = format('changelogerator %<owner>s/%<repo>s -f %<from>s -t %<to>s > %<output>s',
               { owner: owner, repo: 'axia', from: axia_ref1, to: axia_ref2, output: axia_data })
  system(cmd)
else
  logger.debug("Re-using:#{axia_data}")
end

if ENV['NO_CACHE'] || !File.file?(substrate_data)
  logger.debug(format('Fetching data for Substrate into %s', substrate_data))
  cmd = format('changelogerator %<owner>s/%<repo>s -f %<from>s -t %<to>s > %<output>s',
               { owner: owner, repo: 'substrate', from: substrate_ref1, to: substrate_ref2, output: substrate_data })
  system(cmd)
else
  logger.debug("Re-using:#{substrate_data}")
end

SHELL_DIGEST = ENV['SHELL_DIGEST'] || 'digests/shell-srtool-digest.json'
WESTMINT_DIGEST = ENV['WESTMINT_DIGEST'] || 'digests/westmint-srtool-digest.json'
STATEMINE_DIGEST = ENV['STATEMINE_DIGEST'] || 'digests/statemine-srtool-digest.json'
STATEMINT_DIGEST = ENV['STATEMINT_DIGEST'] || 'digests/statemint-srtool-digest.json'
BETANET_PARA_DIGEST = ENV['BETANET_PARA_DIGEST'] || 'digests/betanet-allychain-srtool-digest.json'

# Here we compose all the pieces together into one
# single big json file.
cmd = format('jq \
    --slurpfile cumulus %s \
    --slurpfile substrate %s \
    --slurpfile axia %s \
    --slurpfile srtool_shell %s \
    --slurpfile srtool_westmint %s \
    --slurpfile srtool_statemine %s \
    --slurpfile srtool_statemint %s \
    --slurpfile srtool_betanet_allychain %s \
    -n \'{
            cumulus: $cumulus[0],
            substrate: $substrate[0],
            axia: $axia[0],
        srtool: [
        { name: "betanet", data: $srtool_betanet_allychain[0] },
        { name: "shell", data: $srtool_shell[0] },
        { name: "westmint", data: $srtool_westmint[0] },
        { name: "statemint", data: $srtool_statemint[0] },
        { name: "statemine", data: $srtool_statemine[0] }
    ] }\' > context.json', cumulus_data, substrate_data, axia_data,
             SHELL_DIGEST,
             WESTMINT_DIGEST,
             STATEMINE_DIGEST,
             STATEMINT_DIGEST,
             BETANET_PARA_DIGEST)
system(cmd)

cmd = format('tera --env --env-key env --include-path templates \
        --template templates/template.md.tera context.json > %s', output)
system(cmd)
